This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: node_modules
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
components/
  Button.tsx
federation/
  mod.ts
islands/
  Counter.tsx
routes/
  api/
    joke.ts
  greet/
    [name].tsx
  _404.tsx
  _app.tsx
  _middleware.ts
  index.tsx
static/
  logo.svg
  styles.css
.gitignore
deno.json
dev.ts
fresh.config.ts
fresh.gen.ts
logging.ts
main.ts
README.md
tailwind.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/Button.tsx">
import { JSX } from "preact";
import { IS_BROWSER } from "$fresh/runtime.ts";
⋮----
export function Button(props: JSX.HTMLAttributes<HTMLButtonElement>)
</file>

<file path="federation/mod.ts">
import { createFederation, Person } from "@fedify/fedify";
import { getLogger } from "@logtape/logtape";
import { PostgresKvStore, PostgresMessageQueue } from "@fedify/postgres";
import postgres from "postgres";
</file>

<file path="islands/Counter.tsx">
import type { Signal } from "@preact/signals";
import { Button } from "../components/Button.tsx";
⋮----
interface CounterProps {
  count: Signal<number>;
}
</file>

<file path="routes/api/joke.ts">
import { FreshContext } from "$fresh/server.ts";
⋮----
// Jokes courtesy of https://punsandoneliners.com/randomness/programmer-jokes/
⋮----
export const handler = (_req: Request, _ctx: FreshContext): Response =>
</file>

<file path="routes/greet/[name].tsx">
import { PageProps } from "$fresh/server.ts";
⋮----
export default function Greet(props: PageProps)
</file>

<file path="routes/_404.tsx">
import { Head } from "$fresh/runtime.ts";
⋮----
export default function Error404()
</file>

<file path="routes/_app.tsx">
import { type PageProps } from "$fresh/server.ts";
export default function App(
</file>

<file path="routes/_middleware.ts">
import { Handler } from "$fresh/server.ts";
import federation from "../federation/mod.ts";
import { integrateHandler } from "@fedify/fedify/x/fresh";
⋮----
// This is the entry point to the Fedify middleware from the Fresh framework:
</file>

<file path="routes/index.tsx">
import { useSignal } from "@preact/signals";
import Counter from "../islands/Counter.tsx";
⋮----
export default function Home()
</file>

<file path="static/logo.svg">
<svg width="40" height="40" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M34.092 8.845C38.929 20.652 34.092 27 30 30.5c1 3.5-2.986 4.222-4.5 2.5-4.457 1.537-13.512 1.487-20-5C2 24.5 4.73 16.714 14 11.5c8-4.5 16-7 20.092-2.655Z" fill="#FFDB1E"/>
  <path d="M14 11.5c6.848-4.497 15.025-6.38 18.368-3.47C37.5 12.5 21.5 22.612 15.5 25c-6.5 2.587-3 8.5-6.5 8.5-3 0-2.5-4-5.183-7.75C2.232 23.535 6.16 16.648 14 11.5Z" fill="#fff" stroke="#FFDB1E"/>
  <path d="M28.535 8.772c4.645 1.25-.365 5.695-4.303 8.536-3.732 2.692-6.606 4.21-7.923 4.83-.366.173-1.617-2.252-1.617-1 0 .417-.7 2.238-.934 2.326-1.365.512-4.223 1.29-5.835 1.29-3.491 0-1.923-4.754 3.014-9.122.892-.789 1.478-.645 2.283-.645-.537-.773-.534-.917.403-1.546C17.79 10.64 23 8.77 25.212 8.42c.366.014.82.35.82.629.41-.14 2.095-.388 2.503-.278Z" fill="#FFE600"/>
  <path d="M14.297 16.49c.985-.747 1.644-1.01 2.099-2.526.566.121.841-.08 1.29-.701.324.466 1.657.608 2.453.701-.715.451-1.057.852-1.452 2.106-1.464-.611-3.167-.302-4.39.42Z" fill="#fff"/>
</svg>
</file>

<file path="static/styles.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path=".gitignore">
# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# Fresh build directory
_fresh/
# npm dependencies
node_modules/
</file>

<file path="deno.json">
{
  "lock": false,
  "tasks": {
    "check": "deno fmt --check && deno lint && deno check **/*.ts && deno check **/*.tsx",
    "cli": "echo \"import '\\$fresh/src/dev/cli.ts'\" | deno run --unstable -A -",
    "manifest": "deno task cli manifest $(pwd)",
    "start": "deno run -A --watch=static/,routes/ dev.ts",
    "build": "deno run -A dev.ts build",
    "preview": "deno run -A main.ts",
    "update": "deno run -A -r https://fresh.deno.dev/update ."
  },
  "lint": {
    "rules": {
      "tags": [
        "fresh",
        "recommended"
      ]
    }
  },
  "exclude": [
    "**/_fresh/*"
  ],
  "imports": {
    "$fresh/": "https://deno.land/x/fresh@1.6.8/",
    "@fedify/fedify": "jsr:@fedify/fedify@^1.5.1",
    "@fedify/postgres": "jsr:@fedify/postgres@^0.2.2",
    "@hongminhee/x-forwarded-fetch": "jsr:@hongminhee/x-forwarded-fetch@^0.2.0",
    "@logtape/logtape": "jsr:@logtape/logtape@^0.8.2",
    "postgres": "npm:postgres@^3.4.5",
    "preact": "https://esm.sh/preact@10.19.6",
    "preact/": "https://esm.sh/preact@10.19.6/",
    "@preact/signals": "https://esm.sh/*@preact/signals@1.2.2",
    "@preact/signals-core": "https://esm.sh/*@preact/signals-core@1.5.1",
    "tailwindcss": "npm:tailwindcss@3.4.1",
    "tailwindcss/": "npm:/tailwindcss@3.4.1/",
    "tailwindcss/plugin": "npm:/tailwindcss@3.4.1/plugin.js",
    "$std/": "https://deno.land/std@0.216.0/"
  },
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "preact"
  },
  "nodeModulesDir": true,
  "unstable": [
    "temporal"
  ]
}
</file>

<file path="dev.ts">
import dev from "$fresh/dev.ts";
</file>

<file path="fresh.config.ts">
import { defineConfig } from "$fresh/server.ts";
import tailwind from "$fresh/plugins/tailwind.ts";
</file>

<file path="fresh.gen.ts">
// DO NOT EDIT. This file is generated by Fresh.
// This file SHOULD be checked into source version control.
// This file is automatically updated during development when running `dev.ts`.
⋮----
import { type Manifest } from "$fresh/server.ts";
</file>

<file path="logging.ts">
import { configure, getConsoleSink } from "@logtape/logtape";
import { AsyncLocalStorage } from "node:async_hooks";
</file>

<file path="main.ts">
/// <reference no-default-lib="true" />
/// <reference lib="dom" />
/// <reference lib="dom.iterable" />
/// <reference lib="dom.asynciterable" />
/// <reference lib="deno.ns" />
⋮----
import { ServerContext } from "$fresh/server.ts";
import manifest from "./fresh.gen.ts";
import config from "./fresh.config.ts";
import { behindProxy } from "@hongminhee/x-forwarded-fetch";
</file>

<file path="README.md">
# Fresh project

Your new Fresh project is ready to go. You can follow the Fresh "Getting
Started" guide here: https://fresh.deno.dev/docs/getting-started

### Usage

Make sure to install Deno: https://deno.land/manual/getting_started/installation

Then start the project:

```
deno task start
```

This will watch the project directory and restart as necessary.
</file>

<file path="tailwind.config.ts">
import { type Config } from "tailwindcss";
</file>

</files>
